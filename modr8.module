<?php
// $Id: modr8.module,v 1.32.2.1 2010/04/02 21:33:09 pwolanin Exp $

/**
 * @file
 * Easy dedicated content moderation
 */

/**
 * A random value that should not conflict with core or other modules.
 */

define('NODE_BUILD_MODR8_TEASER', 1242526499);

/**
 * Implements hook_help().
 */
function modr8_help($path, $arg) {
  switch ($path) {
    case 'admin/help#modr8':
      return '<p>' . t("Easy, dedicated moderation of content. Assign the 'moderate content' permission to one or mode user roles. Set up the default moderation option for each node type.") . '</p>';
      // OPTIONAL: Add additional cases for other paths that should display help text.
  }
}

/**
 * An access function for Moderation Menu Tab
 */
function modr8_moderation_access($node) {
  //return user_access('moderate content') && db_query("SELECT COUNT(*) FROM {modr8_log} ml WHERE ml.nid = :ml.nid", array(':ml.nid' => : nid, '' => array(':nid' => $node->nid)))->fetchField();
  return user_access('moderate content') && db_query("SELECT COUNT(*) FROM {modr8_log} ml WHERE ml.nid = :ml.nid", array(':ml.nid' => ': nid', '' => array(':nid' => $node->nid)))->fetchField();
}

/**
 * Implements hook_menu().
 */
function modr8_menu() {
  $items = array();

  $items['admin/content/modr8'] = array(
    'title' => 'Moderated content',
    'description' => 'Approve or delete moderated content.',
    'access callback' => 'user_access',
    'access arguments' => array('moderate content'),
    'page callback' => 'modr8_page',
    'file' => 'modr8_admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/reports/modr8'] = array(
    'title' => 'Content moderation log',
    'description' => 'Show log of all actions on moderated content.',
    'access callback' => 'user_access',
    'access arguments' => array('moderate content'),
    'page callback' => 'modr8_log_view',
    'file' => 'modr8_admin.inc',
  );
  $items['admin/config/system/modr8'] = array(
    'title' => 'Modr8 settings',
    'description' => 'Configure content moderation.',
    'page callback' => 'modr8_settings',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'modr8_admin.inc',
  );
  $items['node/%node/modr8'] = array(
    'title' => 'Moderation',
    'page callback' => 'modr8_log_view',
    'page arguments' => array('node', 1),
    'access callback' => 'modr8_moderation_access',
    'access arguments' => array(1),
    'file' => 'modr8_admin.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/log/response/%'] = array(
    'title' => 'Moderation response',
    'page callback' => 'modr8_response_page',
    'page arguments' => array(1),
    'access callback' => 'modr8_response_access',
    'access arguments' => array(1, 4),
    'file' => 'modr8_admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Access callback.
 */
function modr8_response_access($node, $token) {

  return ($token == modr8_response_token($node->nid, $node->uid));
}

/**
 * Generate a token for responding to a node in moderation.
 *
 * Calculates a HMAC-MD5 according to RFC2104 (http://www.ietf.org/rfc/rfc2104.txt).
 */
function modr8_response_token($nid, $uid) {
  $key = md5(drupal_get_private_key() . 'modr8token');

  return bin2hex(
    pack("H*", md5((str_pad($key, 64, chr(0x00)) ^ (str_repeat(chr(0x5c), 64))) .
    pack("H*", md5((str_pad($key, 64, chr(0x00)) ^ (str_repeat(chr(0x36), 64))) .
    $nid . ':' . $key . ':' . $uid))))
  );
}

/**
 * Implements hook_permission().
 */
function modr8_permission() {
  return array(
    'moderate content' => array(
      'title' => t('moderate content'),
      'description' => t('TODO Add a description for \'moderate content\''),
    ),
    'bypass moderation queue' => array(
      'title' => t('bypass moderation queue'),
      'description' => t('TODO Add a description for \'bypass moderation queue\''),
    ),
  );
}

/**
 * menu callback for settings form.
 */
function modr8_settings() {

  return drupal_get_form('modr8_settings_form');
}

/**
 * Implements hook_node_load().
 */
function modr8_node_load($nodes) {
  // TODO Please convert this statement to the D7 database API syntax.
  $result = db_query('SELECT nid, moderate FROM {modr8_moderate} WHERE nid IN (:nids)', array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->moderate = $record->moderate;
  }
  foreach ($nodes as &$node) {
    if (! isset($node->moderate)) {
      $node->moderate = false;
    }
  }
}

/**
 * Implements hook_node_prepare().
 */
function modr8_node_prepare($node) {
  if (!isset($node->nid)) {
    //a new node
    $node_options = variable_get('node_options_' . $node->type, array('status', 'promote'));
    $node->moderate = in_array('moderate', $node_options) && !user_access('bypass moderation queue');
  }
}

/**
 * Implements hook_node_view().
 */
function modr8_node_view($node, $view_mode = 'full', $langcode) {
  if ($node->moderate && ($view_mode = 'full' || $view_mode == 'teaser')) {
    $node->content['modr8_message'] = array(
      '#type' => 'markup',
      '#markup' => theme('modr8_message', array('0' => $view_mode == 'teaser', '1' => $node->type, '2' => 'view')),
      '#weight' => -100,
    );
  }
}

/**
 * Implements hook_node_update().
 */
function modr8_node_update($node) {
  db_delete('modr8_moderate')->condition('nid', $node->nid)->execute();
  if ($node->moderate) {
    db_insert('modr8_moderate')
      ->fields(array(
      'nid' => $node->nid,
      'moderate' => $node->moderate,
    ))
      ->execute();
    //cut this?
    theme('modr8_message', array('0' => FALSE, '1' => $node->type, '2' => 'update'));
  }
}

/**
 * Implements hook_node_insert().
 */
function modr8_node_insert($node) {
  // We only put a node in moderation if explicitly set.
  if ($node->moderate) {
    db_insert('modr8_moderate')
      ->fields(array(
      'nid' => $node->nid,
      'moderate' => $node->moderate,
    ))
      ->execute();
    //cut this?
    theme('modr8_message', array('0' => FALSE, '1' => $node->type, '2' => 'insert'));
  }
}

/**
 * Implements hook_node_delete().
 */
function modr8_node_delete($node) {
  // Delete log entries when a node is deleted, unless it's deleted while
  // in moderation.  In the latter case, we want to retain the log to see
  // which moderator deleted the node  and any message they sent.
  db_delete('modr8_log')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function modr8_form_alter(&$form, $form_state, $form_id) {

  if (isset($form['type']['#value']) && $form['type']['#value'] . '_node_form' == $form_id) {

    $moderate_checkbox = array(
      '#type' => 'checkbox',
      '#title' => t('In moderation queue'),
      '#default_value' => $form['#node']->moderate,
      '#weight' => 24,
      '#description' => t('This %type will be placed in moderation if the %moderate checkbox is selected.', array('%type' => node_type_get_name($form['#node']), '%moderate' => t('In moderation queue'))),
    );
    if (user_access('administer nodes')) {
      $form['options']['moderate'] = $moderate_checkbox;
    }
    elseif (user_access('moderate content')) {
      $form['moderate'] = $moderate_checkbox;
    }
    else {
      $form['moderate'] = array(
        '#type' => 'value',
        '#value' => $form['#node']->moderate,
      );
      if ($form['#node']->moderate) {
        $form['modr8_message'] = array(
          '#type' => 'markup',
          '#markup' => theme('modr8_message', array('0' => FALSE, '1' => $form['#node']->type, '2' => 'node_form')),
          '#weight' => -100,
        );
      }
    }
  }
  elseif ($form_id == 'node_type_form') {
    $form['workflow']['node_options']['#options']['moderate'] = t('In moderation queue');
  }
}

/**
 * Implements hook_db_rewrite_sql().
 */
function modr8_db_rewrite_sql($query, $primary_table, $primary_field, $args) {
  $node_table = $primary_table;
  switch ($primary_field) {
    case 'nid':
      // this query deals with node objects
      $access = (user_access('administer nodes') || user_access('moderate content'));
      if (!$access && $query) {
        global $user;
        $return = array();
        if ($primary_table != 'n') {
          $return['join'] = "LEFT JOIN {node} modr_n ON $primary_table.nid = modr_n.nid";
          $node_table = 'modr_n';
        }
        if ($user->uid == 0) {
          $return['where'] = "($node_table.moderate != 1)";
        }
        else {
          $return['where'] = "($node_table.moderate != 1 OR $node_table.uid = " . (int) $user->uid . ")";
        }
        return $return;
      }
      break;

  }
}

/**
 * Implements hook_cron().
 *
 * Remove expired moderation log events.
 */
function modr8_cron() {
  if ($log_clear = variable_get('modr8_log_clear', 0)) {
    db_delete('modr8_log')
      ->condition('timestamp', REQUEST_TIME - $log_clear, '<')
      ->execute();
  }
}

/**
 * Implements hook_block_info().
 */
function modr8_block_info() {
  // TODO Rename block deltas (e.g. delta-0) to readable strings.
  if (TRUE) {
    $blocks['delta-0']['info'] = t("Modr8 moderator's block");
    $blocks['modr8-moderators']['info'] = t("Modr8 moderators credit list");
    $blocks['modr8-moderators']['cache'] = DRUPAL_CACHE_GLOBAL;
    return $blocks;
  }
}

/**
 * Implements hook_block_view().
 */
function modr8_block_view($delta) {
  if (TRUE) {
    if ($delta == 'modr8-moderators') {
      $block = array();
      $cutoff = strtotime('now -6 months');
      //$result = db_query_range("SELECT COUNT(ml.modid) AS number, u.* FROM {modr8_log} ml INNER JOIN {users} u on u.uid = ml.uid WHERE ml.action != :ml.action AND ml.timestamp > :ml.timestamp AND u.status = :u.status GROUP BY u.uid ORDER BY number DESC", array(':ml.action' => : ml . action, ':ml.timestamp' => : ml . timestamp, ':u.status' => : u . status, '' => array(
      $result = db_query_range("SELECT COUNT(ml.modid) AS number, u.* FROM {modr8_log} ml INNER JOIN {users} u on u.uid = ml.uid WHERE ml.action != :ml.action AND ml.timestamp > :ml.timestamp AND u.status = :u.status GROUP BY u.uid ORDER BY number DESC", array(':ml.action' => ': ml . action', ':ml.timestamp' => ': ml . timestamp', ':u.status' => ': u . status', '' => array(
          ':ml.action' => 'Response',
          ':ml.timestamp' => $cutoff,
          ':u.status' => 1,
        )));
      $header = array(t('User'), t('Number of actions'));
      $rows = array();
      while ($account = db_fetch_object($result)) {
        $rows[] = array(theme('username', array('account' => array('account' => $account))), $account->number);
      }
      if ($rows) {
        $block['content'] = t('Last 6 months:') . '<br />' . theme('table', array('header' => array(
            'header' => $header,
            'rows' => $rows,
          )));
        $block['subject'] = t('Top moderators');
      }
      return $block;
    }
    elseif (user_access('moderate content')) {
      $block['subject'] = t('Moderation queue');
      $is_published = '';
      if (!user_access('administer nodes')) {
        // Users who don't have the 'administer nodes' permission can only see published nodes.
        $is_published = 'n.status = 1 AND ';
      }

      // TODO Please convert this statement to the D7 database API syntax.
      
      
      
      //$query->addTag('node_access');
      
      
      //db_rewrite_sql('SELECT COUNT(*) FROM {node} n WHERE ' . $is_published . ' n.moderate = 1');
      
      //$count = db_query(db_rewrite_sql('SELECT COUNT(*) FROM {node} n WHERE ' . $is_published . ' n.moderate = 1'))->fetchField();
      //Removed db_rewrite_sql  tjs lt  2011April26
      
      $count = db_query('SELECT COUNT(*) FROM {node} n WHERE ' . $is_published . ' n.moderate = 1')->fetchField();
      $content = '<p>' . l(t('@items in moderation', array('@items' => format_plural($count, '1 post', '@count posts'))), 'admin/content/modr8') . '</p>';
      if ($count) {
        //$sql = db_rewrite_sql('SELECT n.nid, n.title FROM {node} n WHERE ' . $is_published . ' n.moderate = 1 ORDER BY n.changed DESC');
        $sql = db_rewrite_sql('SELECT n.nid, n.title FROM {node} n WHERE ' . $is_published . ' n.moderate = 1 ORDER BY n.changed DESC');
        // TODO Please convert this statement to the D7 database API syntax.
        // TODO Please convert this statement to the D7 database API syntax.
        $result = db_query_range($sql);
        $content .= node_title_list($result, t('Recent additions:'));
      }
      $block['content'] = $content;
      return $block;
    }
  }
}

/**
 * Implements hook_block().
 */
function modr8_block_OLD($op = 'list', $delta = 0) { }


/**
 * Implements hook_theme().
 */
function modr8_theme($existing, $type, $theme, $path) {
  return array(
    'modr8_message' => array('variables' => array('teaser', 'nodetype', 'op')),
    'modr8_form' => array('render element' => 'form'),
    'moderation_event' => array('variables' => array('event')),
    'modr8_note' => array('variables' => array('note')),
  );
}
/**
 * Theming function for messages.
 */
function theme_modr8_message() {
  // TODO Number of parameters in this theme funcion does not match number of parameters found in hook_theme.
  $teaser = $variables['0'];
  $nodetype = $variables['1'];
  $op = $variables['2'];
  static $already_messaged = FALSE;
  // Don't add the message more than once per page load.
  if ($already_messaged) {
    return;
  }
  if ($teaser) {
    return ' <div class="marker">' . t('Pending moderation') . '</div>';
  }
  else {
    switch ($op) {
      case 'view':
        drupal_set_message(t("The post has been submitted for moderation and won't be listed publicly until it has been approved."), 'warning');
        break;
      case 'node_form':
        if (!user_access('bypass moderation queue')) {
          drupal_set_message(t('This %type will be submitted for moderation and will not be accessible to other users until it has been approved.', array('%type' => node_type_get_name($nodetype))));
        }
        break;
    }
  }
  $already_messaged = TRUE;
}
